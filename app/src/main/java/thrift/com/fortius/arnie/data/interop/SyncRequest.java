/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.fortius.arnie.data.interop;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2016-03-13")
public class SyncRequest implements org.apache.thrift.TBase<SyncRequest, SyncRequest._Fields>, java.io.Serializable, Cloneable, Comparable<SyncRequest>, android.os.Parcelable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("SyncRequest");

  private static final org.apache.thrift.protocol.TField USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("userId", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField REQUEST_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("requestType", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField EXISTING_SESSION_RANGES_FIELD_DESC = new org.apache.thrift.protocol.TField("existingSessionRanges", org.apache.thrift.protocol.TType.LIST, (short)3);
  private static final org.apache.thrift.protocol.TField NEW_SESSIONS_FIELD_DESC = new org.apache.thrift.protocol.TField("newSessions", org.apache.thrift.protocol.TType.LIST, (short)4);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new SyncRequestStandardSchemeFactory());
    schemes.put(TupleScheme.class, new SyncRequestTupleSchemeFactory());
  }

  public long userId; // required
  /**
   * 
   * @see SyncRequestType
   */
  public SyncRequestType requestType; // required
  public List<TimeRange> existingSessionRanges; // optional
  public List<WorkoutSession> newSessions; // optional

  @Override
  public void writeToParcel(android.os.Parcel out, int flags) {
    //primitive bitfield of type: byte
    out.writeByte(__isset_bitfield);

    out.writeLong(userId);
    out.writeInt(requestType.getValue());
    out.writeTypedList(existingSessionRanges);
    out.writeTypedList(newSessions);
  }

  @Override
  public int describeContents() {
    return 0;
  }

  public SyncRequest(android.os.Parcel in) {
    //primitive bitfield of type: byte
    __isset_bitfield = in.readByte();

    this.userId = in.readLong();
    this.requestType = SyncRequestType.findByValue(in.readInt());
    this.existingSessionRanges = new ArrayList<TimeRange>();
    in.readTypedList(this.existingSessionRanges, TimeRange.CREATOR);
    this.newSessions = new ArrayList<WorkoutSession>();
    in.readTypedList(this.newSessions, WorkoutSession.CREATOR);
  }

  public static final android.os.Parcelable.Creator<SyncRequest> CREATOR = new android.os.Parcelable.Creator<SyncRequest>() {
    @Override
    public SyncRequest[] newArray(int size) {
      return new SyncRequest[size];
    }

    @Override
    public SyncRequest createFromParcel(android.os.Parcel in) {
      return new SyncRequest(in);
    }
  };

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    USER_ID((short)1, "userId"),
    /**
     * 
     * @see SyncRequestType
     */
    REQUEST_TYPE((short)2, "requestType"),
    EXISTING_SESSION_RANGES((short)3, "existingSessionRanges"),
    NEW_SESSIONS((short)4, "newSessions");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // USER_ID
          return USER_ID;
        case 2: // REQUEST_TYPE
          return REQUEST_TYPE;
        case 3: // EXISTING_SESSION_RANGES
          return EXISTING_SESSION_RANGES;
        case 4: // NEW_SESSIONS
          return NEW_SESSIONS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __USERID_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.EXISTING_SESSION_RANGES,_Fields.NEW_SESSIONS};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.USER_ID, new org.apache.thrift.meta_data.FieldMetaData("userId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.REQUEST_TYPE, new org.apache.thrift.meta_data.FieldMetaData("requestType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, SyncRequestType.class)));
    tmpMap.put(_Fields.EXISTING_SESSION_RANGES, new org.apache.thrift.meta_data.FieldMetaData("existingSessionRanges", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TimeRange.class))));
    tmpMap.put(_Fields.NEW_SESSIONS, new org.apache.thrift.meta_data.FieldMetaData("newSessions", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, WorkoutSession.class))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(SyncRequest.class, metaDataMap);
  }

  public SyncRequest() {
  }

  public SyncRequest(
    long userId,
    SyncRequestType requestType)
  {
    this();
    this.userId = userId;
    setUserIdIsSet(true);
    this.requestType = requestType;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public SyncRequest(SyncRequest other) {
    __isset_bitfield = other.__isset_bitfield;
    this.userId = other.userId;
    if (other.isSetRequestType()) {
      this.requestType = other.requestType;
    }
    if (other.isSetExistingSessionRanges()) {
      List<TimeRange> __this__existingSessionRanges = new ArrayList<TimeRange>(other.existingSessionRanges.size());
      for (TimeRange other_element : other.existingSessionRanges) {
        __this__existingSessionRanges.add(new TimeRange(other_element));
      }
      this.existingSessionRanges = __this__existingSessionRanges;
    }
    if (other.isSetNewSessions()) {
      List<WorkoutSession> __this__newSessions = new ArrayList<WorkoutSession>(other.newSessions.size());
      for (WorkoutSession other_element : other.newSessions) {
        __this__newSessions.add(new WorkoutSession(other_element));
      }
      this.newSessions = __this__newSessions;
    }
  }

  public SyncRequest deepCopy() {
    return new SyncRequest(this);
  }

  @Override
  public void clear() {
    setUserIdIsSet(false);
    this.userId = 0;
    this.requestType = null;
    this.existingSessionRanges = null;
    this.newSessions = null;
  }

  public long getUserId() {
    return this.userId;
  }

  public SyncRequest setUserId(long userId) {
    this.userId = userId;
    setUserIdIsSet(true);
    return this;
  }

  public void unsetUserId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __USERID_ISSET_ID);
  }

  /** Returns true if field userId is set (has been assigned a value) and false otherwise */
  public boolean isSetUserId() {
    return EncodingUtils.testBit(__isset_bitfield, __USERID_ISSET_ID);
  }

  public void setUserIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __USERID_ISSET_ID, value);
  }

  /**
   * 
   * @see SyncRequestType
   */
  public SyncRequestType getRequestType() {
    return this.requestType;
  }

  /**
   * 
   * @see SyncRequestType
   */
  public SyncRequest setRequestType(SyncRequestType requestType) {
    this.requestType = requestType;
    return this;
  }

  public void unsetRequestType() {
    this.requestType = null;
  }

  /** Returns true if field requestType is set (has been assigned a value) and false otherwise */
  public boolean isSetRequestType() {
    return this.requestType != null;
  }

  public void setRequestTypeIsSet(boolean value) {
    if (!value) {
      this.requestType = null;
    }
  }

  public int getExistingSessionRangesSize() {
    return (this.existingSessionRanges == null) ? 0 : this.existingSessionRanges.size();
  }

  public java.util.Iterator<TimeRange> getExistingSessionRangesIterator() {
    return (this.existingSessionRanges == null) ? null : this.existingSessionRanges.iterator();
  }

  public void addToExistingSessionRanges(TimeRange elem) {
    if (this.existingSessionRanges == null) {
      this.existingSessionRanges = new ArrayList<TimeRange>();
    }
    this.existingSessionRanges.add(elem);
  }

  public List<TimeRange> getExistingSessionRanges() {
    return this.existingSessionRanges;
  }

  public SyncRequest setExistingSessionRanges(List<TimeRange> existingSessionRanges) {
    this.existingSessionRanges = existingSessionRanges;
    return this;
  }

  public void unsetExistingSessionRanges() {
    this.existingSessionRanges = null;
  }

  /** Returns true if field existingSessionRanges is set (has been assigned a value) and false otherwise */
  public boolean isSetExistingSessionRanges() {
    return this.existingSessionRanges != null;
  }

  public void setExistingSessionRangesIsSet(boolean value) {
    if (!value) {
      this.existingSessionRanges = null;
    }
  }

  public int getNewSessionsSize() {
    return (this.newSessions == null) ? 0 : this.newSessions.size();
  }

  public java.util.Iterator<WorkoutSession> getNewSessionsIterator() {
    return (this.newSessions == null) ? null : this.newSessions.iterator();
  }

  public void addToNewSessions(WorkoutSession elem) {
    if (this.newSessions == null) {
      this.newSessions = new ArrayList<WorkoutSession>();
    }
    this.newSessions.add(elem);
  }

  public List<WorkoutSession> getNewSessions() {
    return this.newSessions;
  }

  public SyncRequest setNewSessions(List<WorkoutSession> newSessions) {
    this.newSessions = newSessions;
    return this;
  }

  public void unsetNewSessions() {
    this.newSessions = null;
  }

  /** Returns true if field newSessions is set (has been assigned a value) and false otherwise */
  public boolean isSetNewSessions() {
    return this.newSessions != null;
  }

  public void setNewSessionsIsSet(boolean value) {
    if (!value) {
      this.newSessions = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case USER_ID:
      if (value == null) {
        unsetUserId();
      } else {
        setUserId((Long)value);
      }
      break;

    case REQUEST_TYPE:
      if (value == null) {
        unsetRequestType();
      } else {
        setRequestType((SyncRequestType)value);
      }
      break;

    case EXISTING_SESSION_RANGES:
      if (value == null) {
        unsetExistingSessionRanges();
      } else {
        setExistingSessionRanges((List<TimeRange>)value);
      }
      break;

    case NEW_SESSIONS:
      if (value == null) {
        unsetNewSessions();
      } else {
        setNewSessions((List<WorkoutSession>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case USER_ID:
      return getUserId();

    case REQUEST_TYPE:
      return getRequestType();

    case EXISTING_SESSION_RANGES:
      return getExistingSessionRanges();

    case NEW_SESSIONS:
      return getNewSessions();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case USER_ID:
      return isSetUserId();
    case REQUEST_TYPE:
      return isSetRequestType();
    case EXISTING_SESSION_RANGES:
      return isSetExistingSessionRanges();
    case NEW_SESSIONS:
      return isSetNewSessions();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof SyncRequest)
      return this.equals((SyncRequest)that);
    return false;
  }

  public boolean equals(SyncRequest that) {
    if (that == null)
      return false;

    boolean this_present_userId = true;
    boolean that_present_userId = true;
    if (this_present_userId || that_present_userId) {
      if (!(this_present_userId && that_present_userId))
        return false;
      if (this.userId != that.userId)
        return false;
    }

    boolean this_present_requestType = true && this.isSetRequestType();
    boolean that_present_requestType = true && that.isSetRequestType();
    if (this_present_requestType || that_present_requestType) {
      if (!(this_present_requestType && that_present_requestType))
        return false;
      if (!this.requestType.equals(that.requestType))
        return false;
    }

    boolean this_present_existingSessionRanges = true && this.isSetExistingSessionRanges();
    boolean that_present_existingSessionRanges = true && that.isSetExistingSessionRanges();
    if (this_present_existingSessionRanges || that_present_existingSessionRanges) {
      if (!(this_present_existingSessionRanges && that_present_existingSessionRanges))
        return false;
      if (!this.existingSessionRanges.equals(that.existingSessionRanges))
        return false;
    }

    boolean this_present_newSessions = true && this.isSetNewSessions();
    boolean that_present_newSessions = true && that.isSetNewSessions();
    if (this_present_newSessions || that_present_newSessions) {
      if (!(this_present_newSessions && that_present_newSessions))
        return false;
      if (!this.newSessions.equals(that.newSessions))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_userId = true;
    list.add(present_userId);
    if (present_userId)
      list.add(userId);

    boolean present_requestType = true && (isSetRequestType());
    list.add(present_requestType);
    if (present_requestType)
      list.add(requestType.getValue());

    boolean present_existingSessionRanges = true && (isSetExistingSessionRanges());
    list.add(present_existingSessionRanges);
    if (present_existingSessionRanges)
      list.add(existingSessionRanges);

    boolean present_newSessions = true && (isSetNewSessions());
    list.add(present_newSessions);
    if (present_newSessions)
      list.add(newSessions);

    return list.hashCode();
  }

  @Override
  public int compareTo(SyncRequest other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetUserId()).compareTo(other.isSetUserId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUserId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userId, other.userId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRequestType()).compareTo(other.isSetRequestType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRequestType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.requestType, other.requestType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetExistingSessionRanges()).compareTo(other.isSetExistingSessionRanges());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExistingSessionRanges()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.existingSessionRanges, other.existingSessionRanges);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNewSessions()).compareTo(other.isSetNewSessions());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNewSessions()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.newSessions, other.newSessions);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("SyncRequest(");
    boolean first = true;

    sb.append("userId:");
    sb.append(this.userId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("requestType:");
    if (this.requestType == null) {
      sb.append("null");
    } else {
      sb.append(this.requestType);
    }
    first = false;
    if (isSetExistingSessionRanges()) {
      if (!first) sb.append(", ");
      sb.append("existingSessionRanges:");
      if (this.existingSessionRanges == null) {
        sb.append("null");
      } else {
        sb.append(this.existingSessionRanges);
      }
      first = false;
    }
    if (isSetNewSessions()) {
      if (!first) sb.append(", ");
      sb.append("newSessions:");
      if (this.newSessions == null) {
        sb.append("null");
      } else {
        sb.append(this.newSessions);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class SyncRequestStandardSchemeFactory implements SchemeFactory {
    public SyncRequestStandardScheme getScheme() {
      return new SyncRequestStandardScheme();
    }
  }

  private static class SyncRequestStandardScheme extends StandardScheme<SyncRequest> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, SyncRequest struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // USER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.userId = iprot.readI64();
              struct.setUserIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // REQUEST_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.requestType = com.fortius.arnie.data.interop.SyncRequestType.findByValue(iprot.readI32());
              struct.setRequestTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // EXISTING_SESSION_RANGES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list8 = iprot.readListBegin();
                struct.existingSessionRanges = new ArrayList<TimeRange>(_list8.size);
                TimeRange _elem9;
                for (int _i10 = 0; _i10 < _list8.size; ++_i10)
                {
                  _elem9 = new TimeRange();
                  _elem9.read(iprot);
                  struct.existingSessionRanges.add(_elem9);
                }
                iprot.readListEnd();
              }
              struct.setExistingSessionRangesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // NEW_SESSIONS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list11 = iprot.readListBegin();
                struct.newSessions = new ArrayList<WorkoutSession>(_list11.size);
                WorkoutSession _elem12;
                for (int _i13 = 0; _i13 < _list11.size; ++_i13)
                {
                  _elem12 = new WorkoutSession();
                  _elem12.read(iprot);
                  struct.newSessions.add(_elem12);
                }
                iprot.readListEnd();
              }
              struct.setNewSessionsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, SyncRequest struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(USER_ID_FIELD_DESC);
      oprot.writeI64(struct.userId);
      oprot.writeFieldEnd();
      if (struct.requestType != null) {
        oprot.writeFieldBegin(REQUEST_TYPE_FIELD_DESC);
        oprot.writeI32(struct.requestType.getValue());
        oprot.writeFieldEnd();
      }
      if (struct.existingSessionRanges != null) {
        if (struct.isSetExistingSessionRanges()) {
          oprot.writeFieldBegin(EXISTING_SESSION_RANGES_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.existingSessionRanges.size()));
            for (TimeRange _iter14 : struct.existingSessionRanges)
            {
              _iter14.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.newSessions != null) {
        if (struct.isSetNewSessions()) {
          oprot.writeFieldBegin(NEW_SESSIONS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.newSessions.size()));
            for (WorkoutSession _iter15 : struct.newSessions)
            {
              _iter15.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class SyncRequestTupleSchemeFactory implements SchemeFactory {
    public SyncRequestTupleScheme getScheme() {
      return new SyncRequestTupleScheme();
    }
  }

  private static class SyncRequestTupleScheme extends TupleScheme<SyncRequest> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, SyncRequest struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetUserId()) {
        optionals.set(0);
      }
      if (struct.isSetRequestType()) {
        optionals.set(1);
      }
      if (struct.isSetExistingSessionRanges()) {
        optionals.set(2);
      }
      if (struct.isSetNewSessions()) {
        optionals.set(3);
      }
      oprot.writeBitSet(optionals, 4);
      if (struct.isSetUserId()) {
        oprot.writeI64(struct.userId);
      }
      if (struct.isSetRequestType()) {
        oprot.writeI32(struct.requestType.getValue());
      }
      if (struct.isSetExistingSessionRanges()) {
        {
          oprot.writeI32(struct.existingSessionRanges.size());
          for (TimeRange _iter16 : struct.existingSessionRanges)
          {
            _iter16.write(oprot);
          }
        }
      }
      if (struct.isSetNewSessions()) {
        {
          oprot.writeI32(struct.newSessions.size());
          for (WorkoutSession _iter17 : struct.newSessions)
          {
            _iter17.write(oprot);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, SyncRequest struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(4);
      if (incoming.get(0)) {
        struct.userId = iprot.readI64();
        struct.setUserIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.requestType = com.fortius.arnie.data.interop.SyncRequestType.findByValue(iprot.readI32());
        struct.setRequestTypeIsSet(true);
      }
      if (incoming.get(2)) {
        {
          org.apache.thrift.protocol.TList _list18 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.existingSessionRanges = new ArrayList<TimeRange>(_list18.size);
          TimeRange _elem19;
          for (int _i20 = 0; _i20 < _list18.size; ++_i20)
          {
            _elem19 = new TimeRange();
            _elem19.read(iprot);
            struct.existingSessionRanges.add(_elem19);
          }
        }
        struct.setExistingSessionRangesIsSet(true);
      }
      if (incoming.get(3)) {
        {
          org.apache.thrift.protocol.TList _list21 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.newSessions = new ArrayList<WorkoutSession>(_list21.size);
          WorkoutSession _elem22;
          for (int _i23 = 0; _i23 < _list21.size; ++_i23)
          {
            _elem22 = new WorkoutSession();
            _elem22.read(iprot);
            struct.newSessions.add(_elem22);
          }
        }
        struct.setNewSessionsIsSet(true);
      }
    }
  }

}

