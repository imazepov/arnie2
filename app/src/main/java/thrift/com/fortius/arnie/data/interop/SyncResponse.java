/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.fortius.arnie.data.interop;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2016-04-21")
public class SyncResponse implements org.apache.thrift.TBase<SyncResponse, SyncResponse._Fields>, java.io.Serializable, Cloneable, Comparable<SyncResponse>, android.os.Parcelable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("SyncResponse");

  private static final org.apache.thrift.protocol.TField MISSING_SESSION_RANGES_FIELD_DESC = new org.apache.thrift.protocol.TField("missingSessionRanges", org.apache.thrift.protocol.TType.LIST, (short)2);
  private static final org.apache.thrift.protocol.TField MISSING_SESSIONS_FIELD_DESC = new org.apache.thrift.protocol.TField("missingSessions", org.apache.thrift.protocol.TType.LIST, (short)3);
  private static final org.apache.thrift.protocol.TField MISSING_EXERCISES_FIELD_DESC = new org.apache.thrift.protocol.TField("missingExercises", org.apache.thrift.protocol.TType.LIST, (short)4);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new SyncResponseStandardSchemeFactory());
    schemes.put(TupleScheme.class, new SyncResponseTupleSchemeFactory());
  }

  public List<TimeRange> missingSessionRanges; // optional
  public List<WorkoutSession> missingSessions; // optional
  public List<Exercise> missingExercises; // optional

  @Override
  public void writeToParcel(android.os.Parcel out, int flags) {
    out.writeTypedList(missingSessionRanges);
    out.writeTypedList(missingSessions);
    out.writeTypedList(missingExercises);
  }

  @Override
  public int describeContents() {
    return 0;
  }

  public SyncResponse(android.os.Parcel in) {
    this.missingSessionRanges = new ArrayList<TimeRange>();
    in.readTypedList(this.missingSessionRanges, TimeRange.CREATOR);
    this.missingSessions = new ArrayList<WorkoutSession>();
    in.readTypedList(this.missingSessions, WorkoutSession.CREATOR);
    this.missingExercises = new ArrayList<Exercise>();
    in.readTypedList(this.missingExercises, Exercise.CREATOR);
  }

  public static final android.os.Parcelable.Creator<SyncResponse> CREATOR = new android.os.Parcelable.Creator<SyncResponse>() {
    @Override
    public SyncResponse[] newArray(int size) {
      return new SyncResponse[size];
    }

    @Override
    public SyncResponse createFromParcel(android.os.Parcel in) {
      return new SyncResponse(in);
    }
  };

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    MISSING_SESSION_RANGES((short)2, "missingSessionRanges"),
    MISSING_SESSIONS((short)3, "missingSessions"),
    MISSING_EXERCISES((short)4, "missingExercises");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 2: // MISSING_SESSION_RANGES
          return MISSING_SESSION_RANGES;
        case 3: // MISSING_SESSIONS
          return MISSING_SESSIONS;
        case 4: // MISSING_EXERCISES
          return MISSING_EXERCISES;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final _Fields optionals[] = {_Fields.MISSING_SESSION_RANGES,_Fields.MISSING_SESSIONS,_Fields.MISSING_EXERCISES};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.MISSING_SESSION_RANGES, new org.apache.thrift.meta_data.FieldMetaData("missingSessionRanges", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TimeRange.class))));
    tmpMap.put(_Fields.MISSING_SESSIONS, new org.apache.thrift.meta_data.FieldMetaData("missingSessions", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, WorkoutSession.class))));
    tmpMap.put(_Fields.MISSING_EXERCISES, new org.apache.thrift.meta_data.FieldMetaData("missingExercises", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Exercise.class))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(SyncResponse.class, metaDataMap);
  }

  public SyncResponse() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public SyncResponse(SyncResponse other) {
    if (other.isSetMissingSessionRanges()) {
      List<TimeRange> __this__missingSessionRanges = new ArrayList<TimeRange>(other.missingSessionRanges.size());
      for (TimeRange other_element : other.missingSessionRanges) {
        __this__missingSessionRanges.add(new TimeRange(other_element));
      }
      this.missingSessionRanges = __this__missingSessionRanges;
    }
    if (other.isSetMissingSessions()) {
      List<WorkoutSession> __this__missingSessions = new ArrayList<WorkoutSession>(other.missingSessions.size());
      for (WorkoutSession other_element : other.missingSessions) {
        __this__missingSessions.add(new WorkoutSession(other_element));
      }
      this.missingSessions = __this__missingSessions;
    }
    if (other.isSetMissingExercises()) {
      List<Exercise> __this__missingExercises = new ArrayList<Exercise>(other.missingExercises.size());
      for (Exercise other_element : other.missingExercises) {
        __this__missingExercises.add(new Exercise(other_element));
      }
      this.missingExercises = __this__missingExercises;
    }
  }

  public SyncResponse deepCopy() {
    return new SyncResponse(this);
  }

  @Override
  public void clear() {
    this.missingSessionRanges = null;
    this.missingSessions = null;
    this.missingExercises = null;
  }

  public int getMissingSessionRangesSize() {
    return (this.missingSessionRanges == null) ? 0 : this.missingSessionRanges.size();
  }

  public java.util.Iterator<TimeRange> getMissingSessionRangesIterator() {
    return (this.missingSessionRanges == null) ? null : this.missingSessionRanges.iterator();
  }

  public void addToMissingSessionRanges(TimeRange elem) {
    if (this.missingSessionRanges == null) {
      this.missingSessionRanges = new ArrayList<TimeRange>();
    }
    this.missingSessionRanges.add(elem);
  }

  public List<TimeRange> getMissingSessionRanges() {
    return this.missingSessionRanges;
  }

  public SyncResponse setMissingSessionRanges(List<TimeRange> missingSessionRanges) {
    this.missingSessionRanges = missingSessionRanges;
    return this;
  }

  public void unsetMissingSessionRanges() {
    this.missingSessionRanges = null;
  }

  /** Returns true if field missingSessionRanges is set (has been assigned a value) and false otherwise */
  public boolean isSetMissingSessionRanges() {
    return this.missingSessionRanges != null;
  }

  public void setMissingSessionRangesIsSet(boolean value) {
    if (!value) {
      this.missingSessionRanges = null;
    }
  }

  public int getMissingSessionsSize() {
    return (this.missingSessions == null) ? 0 : this.missingSessions.size();
  }

  public java.util.Iterator<WorkoutSession> getMissingSessionsIterator() {
    return (this.missingSessions == null) ? null : this.missingSessions.iterator();
  }

  public void addToMissingSessions(WorkoutSession elem) {
    if (this.missingSessions == null) {
      this.missingSessions = new ArrayList<WorkoutSession>();
    }
    this.missingSessions.add(elem);
  }

  public List<WorkoutSession> getMissingSessions() {
    return this.missingSessions;
  }

  public SyncResponse setMissingSessions(List<WorkoutSession> missingSessions) {
    this.missingSessions = missingSessions;
    return this;
  }

  public void unsetMissingSessions() {
    this.missingSessions = null;
  }

  /** Returns true if field missingSessions is set (has been assigned a value) and false otherwise */
  public boolean isSetMissingSessions() {
    return this.missingSessions != null;
  }

  public void setMissingSessionsIsSet(boolean value) {
    if (!value) {
      this.missingSessions = null;
    }
  }

  public int getMissingExercisesSize() {
    return (this.missingExercises == null) ? 0 : this.missingExercises.size();
  }

  public java.util.Iterator<Exercise> getMissingExercisesIterator() {
    return (this.missingExercises == null) ? null : this.missingExercises.iterator();
  }

  public void addToMissingExercises(Exercise elem) {
    if (this.missingExercises == null) {
      this.missingExercises = new ArrayList<Exercise>();
    }
    this.missingExercises.add(elem);
  }

  public List<Exercise> getMissingExercises() {
    return this.missingExercises;
  }

  public SyncResponse setMissingExercises(List<Exercise> missingExercises) {
    this.missingExercises = missingExercises;
    return this;
  }

  public void unsetMissingExercises() {
    this.missingExercises = null;
  }

  /** Returns true if field missingExercises is set (has been assigned a value) and false otherwise */
  public boolean isSetMissingExercises() {
    return this.missingExercises != null;
  }

  public void setMissingExercisesIsSet(boolean value) {
    if (!value) {
      this.missingExercises = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case MISSING_SESSION_RANGES:
      if (value == null) {
        unsetMissingSessionRanges();
      } else {
        setMissingSessionRanges((List<TimeRange>)value);
      }
      break;

    case MISSING_SESSIONS:
      if (value == null) {
        unsetMissingSessions();
      } else {
        setMissingSessions((List<WorkoutSession>)value);
      }
      break;

    case MISSING_EXERCISES:
      if (value == null) {
        unsetMissingExercises();
      } else {
        setMissingExercises((List<Exercise>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case MISSING_SESSION_RANGES:
      return getMissingSessionRanges();

    case MISSING_SESSIONS:
      return getMissingSessions();

    case MISSING_EXERCISES:
      return getMissingExercises();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case MISSING_SESSION_RANGES:
      return isSetMissingSessionRanges();
    case MISSING_SESSIONS:
      return isSetMissingSessions();
    case MISSING_EXERCISES:
      return isSetMissingExercises();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof SyncResponse)
      return this.equals((SyncResponse)that);
    return false;
  }

  public boolean equals(SyncResponse that) {
    if (that == null)
      return false;

    boolean this_present_missingSessionRanges = true && this.isSetMissingSessionRanges();
    boolean that_present_missingSessionRanges = true && that.isSetMissingSessionRanges();
    if (this_present_missingSessionRanges || that_present_missingSessionRanges) {
      if (!(this_present_missingSessionRanges && that_present_missingSessionRanges))
        return false;
      if (!this.missingSessionRanges.equals(that.missingSessionRanges))
        return false;
    }

    boolean this_present_missingSessions = true && this.isSetMissingSessions();
    boolean that_present_missingSessions = true && that.isSetMissingSessions();
    if (this_present_missingSessions || that_present_missingSessions) {
      if (!(this_present_missingSessions && that_present_missingSessions))
        return false;
      if (!this.missingSessions.equals(that.missingSessions))
        return false;
    }

    boolean this_present_missingExercises = true && this.isSetMissingExercises();
    boolean that_present_missingExercises = true && that.isSetMissingExercises();
    if (this_present_missingExercises || that_present_missingExercises) {
      if (!(this_present_missingExercises && that_present_missingExercises))
        return false;
      if (!this.missingExercises.equals(that.missingExercises))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_missingSessionRanges = true && (isSetMissingSessionRanges());
    list.add(present_missingSessionRanges);
    if (present_missingSessionRanges)
      list.add(missingSessionRanges);

    boolean present_missingSessions = true && (isSetMissingSessions());
    list.add(present_missingSessions);
    if (present_missingSessions)
      list.add(missingSessions);

    boolean present_missingExercises = true && (isSetMissingExercises());
    list.add(present_missingExercises);
    if (present_missingExercises)
      list.add(missingExercises);

    return list.hashCode();
  }

  @Override
  public int compareTo(SyncResponse other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetMissingSessionRanges()).compareTo(other.isSetMissingSessionRanges());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMissingSessionRanges()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.missingSessionRanges, other.missingSessionRanges);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMissingSessions()).compareTo(other.isSetMissingSessions());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMissingSessions()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.missingSessions, other.missingSessions);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMissingExercises()).compareTo(other.isSetMissingExercises());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMissingExercises()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.missingExercises, other.missingExercises);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("SyncResponse(");
    boolean first = true;

    if (isSetMissingSessionRanges()) {
      sb.append("missingSessionRanges:");
      if (this.missingSessionRanges == null) {
        sb.append("null");
      } else {
        sb.append(this.missingSessionRanges);
      }
      first = false;
    }
    if (isSetMissingSessions()) {
      if (!first) sb.append(", ");
      sb.append("missingSessions:");
      if (this.missingSessions == null) {
        sb.append("null");
      } else {
        sb.append(this.missingSessions);
      }
      first = false;
    }
    if (isSetMissingExercises()) {
      if (!first) sb.append(", ");
      sb.append("missingExercises:");
      if (this.missingExercises == null) {
        sb.append("null");
      } else {
        sb.append(this.missingExercises);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class SyncResponseStandardSchemeFactory implements SchemeFactory {
    public SyncResponseStandardScheme getScheme() {
      return new SyncResponseStandardScheme();
    }
  }

  private static class SyncResponseStandardScheme extends StandardScheme<SyncResponse> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, SyncResponse struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 2: // MISSING_SESSION_RANGES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list32 = iprot.readListBegin();
                struct.missingSessionRanges = new ArrayList<TimeRange>(_list32.size);
                TimeRange _elem33;
                for (int _i34 = 0; _i34 < _list32.size; ++_i34)
                {
                  _elem33 = new TimeRange();
                  _elem33.read(iprot);
                  struct.missingSessionRanges.add(_elem33);
                }
                iprot.readListEnd();
              }
              struct.setMissingSessionRangesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // MISSING_SESSIONS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list35 = iprot.readListBegin();
                struct.missingSessions = new ArrayList<WorkoutSession>(_list35.size);
                WorkoutSession _elem36;
                for (int _i37 = 0; _i37 < _list35.size; ++_i37)
                {
                  _elem36 = new WorkoutSession();
                  _elem36.read(iprot);
                  struct.missingSessions.add(_elem36);
                }
                iprot.readListEnd();
              }
              struct.setMissingSessionsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // MISSING_EXERCISES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list38 = iprot.readListBegin();
                struct.missingExercises = new ArrayList<Exercise>(_list38.size);
                Exercise _elem39;
                for (int _i40 = 0; _i40 < _list38.size; ++_i40)
                {
                  _elem39 = new Exercise();
                  _elem39.read(iprot);
                  struct.missingExercises.add(_elem39);
                }
                iprot.readListEnd();
              }
              struct.setMissingExercisesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, SyncResponse struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.missingSessionRanges != null) {
        if (struct.isSetMissingSessionRanges()) {
          oprot.writeFieldBegin(MISSING_SESSION_RANGES_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.missingSessionRanges.size()));
            for (TimeRange _iter41 : struct.missingSessionRanges)
            {
              _iter41.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.missingSessions != null) {
        if (struct.isSetMissingSessions()) {
          oprot.writeFieldBegin(MISSING_SESSIONS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.missingSessions.size()));
            for (WorkoutSession _iter42 : struct.missingSessions)
            {
              _iter42.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.missingExercises != null) {
        if (struct.isSetMissingExercises()) {
          oprot.writeFieldBegin(MISSING_EXERCISES_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.missingExercises.size()));
            for (Exercise _iter43 : struct.missingExercises)
            {
              _iter43.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class SyncResponseTupleSchemeFactory implements SchemeFactory {
    public SyncResponseTupleScheme getScheme() {
      return new SyncResponseTupleScheme();
    }
  }

  private static class SyncResponseTupleScheme extends TupleScheme<SyncResponse> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, SyncResponse struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetMissingSessionRanges()) {
        optionals.set(0);
      }
      if (struct.isSetMissingSessions()) {
        optionals.set(1);
      }
      if (struct.isSetMissingExercises()) {
        optionals.set(2);
      }
      oprot.writeBitSet(optionals, 3);
      if (struct.isSetMissingSessionRanges()) {
        {
          oprot.writeI32(struct.missingSessionRanges.size());
          for (TimeRange _iter44 : struct.missingSessionRanges)
          {
            _iter44.write(oprot);
          }
        }
      }
      if (struct.isSetMissingSessions()) {
        {
          oprot.writeI32(struct.missingSessions.size());
          for (WorkoutSession _iter45 : struct.missingSessions)
          {
            _iter45.write(oprot);
          }
        }
      }
      if (struct.isSetMissingExercises()) {
        {
          oprot.writeI32(struct.missingExercises.size());
          for (Exercise _iter46 : struct.missingExercises)
          {
            _iter46.write(oprot);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, SyncResponse struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(3);
      if (incoming.get(0)) {
        {
          org.apache.thrift.protocol.TList _list47 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.missingSessionRanges = new ArrayList<TimeRange>(_list47.size);
          TimeRange _elem48;
          for (int _i49 = 0; _i49 < _list47.size; ++_i49)
          {
            _elem48 = new TimeRange();
            _elem48.read(iprot);
            struct.missingSessionRanges.add(_elem48);
          }
        }
        struct.setMissingSessionRangesIsSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.thrift.protocol.TList _list50 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.missingSessions = new ArrayList<WorkoutSession>(_list50.size);
          WorkoutSession _elem51;
          for (int _i52 = 0; _i52 < _list50.size; ++_i52)
          {
            _elem51 = new WorkoutSession();
            _elem51.read(iprot);
            struct.missingSessions.add(_elem51);
          }
        }
        struct.setMissingSessionsIsSet(true);
      }
      if (incoming.get(2)) {
        {
          org.apache.thrift.protocol.TList _list53 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.missingExercises = new ArrayList<Exercise>(_list53.size);
          Exercise _elem54;
          for (int _i55 = 0; _i55 < _list53.size; ++_i55)
          {
            _elem54 = new Exercise();
            _elem54.read(iprot);
            struct.missingExercises.add(_elem54);
          }
        }
        struct.setMissingExercisesIsSet(true);
      }
    }
  }

}

