package arnie.data;

import java.util.List;
import java.util.ArrayList;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.SqlUtils;
import de.greenrobot.dao.internal.DaoConfig;
import de.greenrobot.dao.query.Query;
import de.greenrobot.dao.query.QueryBuilder;

import arnie.data.ExerciseMuscleGroupRef;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table EXERCISE_MUSCLE_GROUP_REF.
*/
public class ExerciseMuscleGroupRefDao extends AbstractDao<ExerciseMuscleGroupRef, Void> {

    public static final String TABLENAME = "EXERCISE_MUSCLE_GROUP_REF";

    /**
     * Properties of entity ExerciseMuscleGroupRef.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property ExerciseId = new Property(0, long.class, "exerciseId", false, "EXERCISE_ID");
        public final static Property MuscleGroupId = new Property(1, long.class, "muscleGroupId", false, "MUSCLE_GROUP_ID");
    };

    private DaoSession daoSession;

    private Query<ExerciseMuscleGroupRef> exercise_MuscleGroupRefsQuery;
    private Query<ExerciseMuscleGroupRef> muscleGroup_ExerciseRefsQuery;

    public ExerciseMuscleGroupRefDao(DaoConfig config) {
        super(config);
    }
    
    public ExerciseMuscleGroupRefDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'EXERCISE_MUSCLE_GROUP_REF' (" + //
                "'EXERCISE_ID' INTEGER NOT NULL ," + // 0: exerciseId
                "'MUSCLE_GROUP_ID' INTEGER NOT NULL );"); // 1: muscleGroupId
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'EXERCISE_MUSCLE_GROUP_REF'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, ExerciseMuscleGroupRef entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getExerciseId());
        stmt.bindLong(2, entity.getMuscleGroupId());
    }

    @Override
    protected void attachEntity(ExerciseMuscleGroupRef entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    /** @inheritdoc */
    @Override
    public ExerciseMuscleGroupRef readEntity(Cursor cursor, int offset) {
        ExerciseMuscleGroupRef entity = new ExerciseMuscleGroupRef( //
            cursor.getLong(offset + 0), // exerciseId
            cursor.getLong(offset + 1) // muscleGroupId
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, ExerciseMuscleGroupRef entity, int offset) {
        entity.setExerciseId(cursor.getLong(offset + 0));
        entity.setMuscleGroupId(cursor.getLong(offset + 1));
     }
    
    /** @inheritdoc */
    @Override
    protected Void updateKeyAfterInsert(ExerciseMuscleGroupRef entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    /** @inheritdoc */
    @Override
    public Void getKey(ExerciseMuscleGroupRef entity) {
        return null;
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "muscleGroupRefs" to-many relationship of Exercise. */
    public List<ExerciseMuscleGroupRef> _queryExercise_MuscleGroupRefs(long exerciseId) {
        synchronized (this) {
            if (exercise_MuscleGroupRefsQuery == null) {
                QueryBuilder<ExerciseMuscleGroupRef> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.ExerciseId.eq(null));
                exercise_MuscleGroupRefsQuery = queryBuilder.build();
            }
        }
        Query<ExerciseMuscleGroupRef> query = exercise_MuscleGroupRefsQuery.forCurrentThread();
        query.setParameter(0, exerciseId);
        return query.list();
    }

    /** Internal query to resolve the "exerciseRefs" to-many relationship of MuscleGroup. */
    public List<ExerciseMuscleGroupRef> _queryMuscleGroup_ExerciseRefs(long muscleGroupId) {
        synchronized (this) {
            if (muscleGroup_ExerciseRefsQuery == null) {
                QueryBuilder<ExerciseMuscleGroupRef> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.MuscleGroupId.eq(null));
                muscleGroup_ExerciseRefsQuery = queryBuilder.build();
            }
        }
        Query<ExerciseMuscleGroupRef> query = muscleGroup_ExerciseRefsQuery.forCurrentThread();
        query.setParameter(0, muscleGroupId);
        return query.list();
    }

    private String selectDeep;

    protected String getSelectDeep() {
        if (selectDeep == null) {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getExerciseDao().getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T1", daoSession.getMuscleGroupDao().getAllColumns());
            builder.append(" FROM EXERCISE_MUSCLE_GROUP_REF T");
            builder.append(" LEFT JOIN EXERCISE T0 ON T.'EXERCISE_ID'=T0.'_id'");
            builder.append(" LEFT JOIN MUSCLE_GROUP T1 ON T.'MUSCLE_GROUP_ID'=T1.'_id'");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }
    
    protected ExerciseMuscleGroupRef loadCurrentDeep(Cursor cursor, boolean lock) {
        ExerciseMuscleGroupRef entity = loadCurrent(cursor, 0, lock);
        int offset = getAllColumns().length;

        Exercise exercise = loadCurrentOther(daoSession.getExerciseDao(), cursor, offset);
         if(exercise != null) {
            entity.setExercise(exercise);
        }
        offset += daoSession.getExerciseDao().getAllColumns().length;

        MuscleGroup muscleGroup = loadCurrentOther(daoSession.getMuscleGroupDao(), cursor, offset);
         if(muscleGroup != null) {
            entity.setMuscleGroup(muscleGroup);
        }

        return entity;    
    }

    public ExerciseMuscleGroupRef loadDeep(Long key) {
        assertSinglePk();
        if (key == null) {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();
        
        String[] keyArray = new String[] { key.toString() };
        Cursor cursor = db.rawQuery(sql, keyArray);
        
        try {
            boolean available = cursor.moveToFirst();
            if (!available) {
                return null;
            } else if (!cursor.isLast()) {
                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
            }
            return loadCurrentDeep(cursor, true);
        } finally {
            cursor.close();
        }
    }
    
    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
    public List<ExerciseMuscleGroupRef> loadAllDeepFromCursor(Cursor cursor) {
        int count = cursor.getCount();
        List<ExerciseMuscleGroupRef> list = new ArrayList<ExerciseMuscleGroupRef>(count);
        
        if (cursor.moveToFirst()) {
            if (identityScope != null) {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try {
                do {
                    list.add(loadCurrentDeep(cursor, false));
                } while (cursor.moveToNext());
            } finally {
                if (identityScope != null) {
                    identityScope.unlock();
                }
            }
        }
        return list;
    }
    
    protected List<ExerciseMuscleGroupRef> loadDeepAllAndCloseCursor(Cursor cursor) {
        try {
            return loadAllDeepFromCursor(cursor);
        } finally {
            cursor.close();
        }
    }
    

    /** A raw-style query where you can pass any WHERE clause and arguments. */
    public List<ExerciseMuscleGroupRef> queryDeep(String where, String... selectionArg) {
        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
        return loadDeepAllAndCloseCursor(cursor);
    }
 
}
