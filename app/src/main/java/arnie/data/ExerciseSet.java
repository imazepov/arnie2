package arnie.data;

import arnie.data.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table EXERCISE_SET.
 */
public class ExerciseSet {

    private Long id;
    private Integer reps;
    private Double weight;
    private java.util.Date timestamp;
    private long exerciseId;
    private long workoutSessionId;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient ExerciseSetDao myDao;

    private Exercise exercise;
    private Long exercise__resolvedKey;

    private WorkoutSession workoutSession;
    private Long workoutSession__resolvedKey;


    public ExerciseSet() {
    }

    public ExerciseSet(Long id) {
        this.id = id;
    }

    public ExerciseSet(Long id, Integer reps, Double weight, java.util.Date timestamp, long exerciseId, long workoutSessionId) {
        this.id = id;
        this.reps = reps;
        this.weight = weight;
        this.timestamp = timestamp;
        this.exerciseId = exerciseId;
        this.workoutSessionId = workoutSessionId;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getExerciseSetDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public Integer getReps() {
        return reps;
    }

    public void setReps(Integer reps) {
        this.reps = reps;
    }

    public Double getWeight() {
        return weight;
    }

    public void setWeight(Double weight) {
        this.weight = weight;
    }

    public java.util.Date getTimestamp() {
        return timestamp;
    }

    public void setTimestamp(java.util.Date timestamp) {
        this.timestamp = timestamp;
    }

    public long getExerciseId() {
        return exerciseId;
    }

    public void setExerciseId(long exerciseId) {
        this.exerciseId = exerciseId;
    }

    public long getWorkoutSessionId() {
        return workoutSessionId;
    }

    public void setWorkoutSessionId(long workoutSessionId) {
        this.workoutSessionId = workoutSessionId;
    }

    /** To-one relationship, resolved on first access. */
    public Exercise getExercise() {
        long __key = this.exerciseId;
        if (exercise__resolvedKey == null || !exercise__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            ExerciseDao targetDao = daoSession.getExerciseDao();
            Exercise exerciseNew = targetDao.load(__key);
            synchronized (this) {
                exercise = exerciseNew;
            	exercise__resolvedKey = __key;
            }
        }
        return exercise;
    }

    public void setExercise(Exercise exercise) {
        if (exercise == null) {
            throw new DaoException("To-one property 'exerciseId' has not-null constraint; cannot set to-one to null");
        }
        synchronized (this) {
            this.exercise = exercise;
            exerciseId = exercise.getId();
            exercise__resolvedKey = exerciseId;
        }
    }

    /** To-one relationship, resolved on first access. */
    public WorkoutSession getWorkoutSession() {
        long __key = this.workoutSessionId;
        if (workoutSession__resolvedKey == null || !workoutSession__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            WorkoutSessionDao targetDao = daoSession.getWorkoutSessionDao();
            WorkoutSession workoutSessionNew = targetDao.load(__key);
            synchronized (this) {
                workoutSession = workoutSessionNew;
            	workoutSession__resolvedKey = __key;
            }
        }
        return workoutSession;
    }

    public void setWorkoutSession(WorkoutSession workoutSession) {
        if (workoutSession == null) {
            throw new DaoException("To-one property 'workoutSessionId' has not-null constraint; cannot set to-one to null");
        }
        synchronized (this) {
            this.workoutSession = workoutSession;
            workoutSessionId = workoutSession.getId();
            workoutSession__resolvedKey = workoutSessionId;
        }
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}
