package arnie.data;

import arnie.data.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table EXERCISE_MUSCLE_GROUP_REF.
 */
public class ExerciseMuscleGroupRef {

    private long exerciseId;
    private long muscleGroupId;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient ExerciseMuscleGroupRefDao myDao;

    private Exercise exercise;
    private Long exercise__resolvedKey;

    private MuscleGroup muscleGroup;
    private Long muscleGroup__resolvedKey;


    public ExerciseMuscleGroupRef() {
    }

    public ExerciseMuscleGroupRef(long exerciseId, long muscleGroupId) {
        this.exerciseId = exerciseId;
        this.muscleGroupId = muscleGroupId;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getExerciseMuscleGroupRefDao() : null;
    }

    public long getExerciseId() {
        return exerciseId;
    }

    public void setExerciseId(long exerciseId) {
        this.exerciseId = exerciseId;
    }

    public long getMuscleGroupId() {
        return muscleGroupId;
    }

    public void setMuscleGroupId(long muscleGroupId) {
        this.muscleGroupId = muscleGroupId;
    }

    /** To-one relationship, resolved on first access. */
    public Exercise getExercise() {
        long __key = this.exerciseId;
        if (exercise__resolvedKey == null || !exercise__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            ExerciseDao targetDao = daoSession.getExerciseDao();
            Exercise exerciseNew = targetDao.load(__key);
            synchronized (this) {
                exercise = exerciseNew;
            	exercise__resolvedKey = __key;
            }
        }
        return exercise;
    }

    public void setExercise(Exercise exercise) {
        if (exercise == null) {
            throw new DaoException("To-one property 'exerciseId' has not-null constraint; cannot set to-one to null");
        }
        synchronized (this) {
            this.exercise = exercise;
            exerciseId = exercise.getId();
            exercise__resolvedKey = exerciseId;
        }
    }

    /** To-one relationship, resolved on first access. */
    public MuscleGroup getMuscleGroup() {
        long __key = this.muscleGroupId;
        if (muscleGroup__resolvedKey == null || !muscleGroup__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            MuscleGroupDao targetDao = daoSession.getMuscleGroupDao();
            MuscleGroup muscleGroupNew = targetDao.load(__key);
            synchronized (this) {
                muscleGroup = muscleGroupNew;
            	muscleGroup__resolvedKey = __key;
            }
        }
        return muscleGroup;
    }

    public void setMuscleGroup(MuscleGroup muscleGroup) {
        if (muscleGroup == null) {
            throw new DaoException("To-one property 'muscleGroupId' has not-null constraint; cannot set to-one to null");
        }
        synchronized (this) {
            this.muscleGroup = muscleGroup;
            muscleGroupId = muscleGroup.getId();
            muscleGroup__resolvedKey = muscleGroupId;
        }
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}
