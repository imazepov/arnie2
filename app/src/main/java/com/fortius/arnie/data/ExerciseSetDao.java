package com.fortius.arnie.data;

import java.util.List;
import java.util.ArrayList;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.SqlUtils;
import de.greenrobot.dao.internal.DaoConfig;
import de.greenrobot.dao.query.Query;
import de.greenrobot.dao.query.QueryBuilder;

import com.fortius.arnie.data.ExerciseSet;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table EXERCISE_SET.
*/
public class ExerciseSetDao extends AbstractDao<ExerciseSet, Long> {

    public static final String TABLENAME = "EXERCISE_SET";

    /**
     * Properties of entity ExerciseSet.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Reps = new Property(1, Integer.class, "reps", false, "REPS");
        public final static Property Weight = new Property(2, Double.class, "weight", false, "WEIGHT");
        public final static Property Timestamp = new Property(3, java.util.Date.class, "timestamp", false, "TIMESTAMP");
        public final static Property ExerciseId = new Property(4, long.class, "exerciseId", false, "EXERCISE_ID");
        public final static Property WorkoutSessionId = new Property(5, long.class, "workoutSessionId", false, "WORKOUT_SESSION_ID");
    };

    private DaoSession daoSession;

    private Query<ExerciseSet> exercise_ExercisesQuery;
    private Query<ExerciseSet> workoutSession_ExerciseSetsQuery;

    public ExerciseSetDao(DaoConfig config) {
        super(config);
    }
    
    public ExerciseSetDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'EXERCISE_SET' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'REPS' INTEGER," + // 1: reps
                "'WEIGHT' REAL," + // 2: weight
                "'TIMESTAMP' INTEGER," + // 3: timestamp
                "'EXERCISE_ID' INTEGER NOT NULL ," + // 4: exerciseId
                "'WORKOUT_SESSION_ID' INTEGER NOT NULL );"); // 5: workoutSessionId
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'EXERCISE_SET'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, ExerciseSet entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Integer reps = entity.getReps();
        if (reps != null) {
            stmt.bindLong(2, reps);
        }
 
        Double weight = entity.getWeight();
        if (weight != null) {
            stmt.bindDouble(3, weight);
        }
 
        java.util.Date timestamp = entity.getTimestamp();
        if (timestamp != null) {
            stmt.bindLong(4, timestamp.getTime());
        }
        stmt.bindLong(5, entity.getExerciseId());
        stmt.bindLong(6, entity.getWorkoutSessionId());
    }

    @Override
    protected void attachEntity(ExerciseSet entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public ExerciseSet readEntity(Cursor cursor, int offset) {
        ExerciseSet entity = new ExerciseSet( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1), // reps
            cursor.isNull(offset + 2) ? null : cursor.getDouble(offset + 2), // weight
            cursor.isNull(offset + 3) ? null : new java.util.Date(cursor.getLong(offset + 3)), // timestamp
            cursor.getLong(offset + 4), // exerciseId
            cursor.getLong(offset + 5) // workoutSessionId
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, ExerciseSet entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setReps(cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1));
        entity.setWeight(cursor.isNull(offset + 2) ? null : cursor.getDouble(offset + 2));
        entity.setTimestamp(cursor.isNull(offset + 3) ? null : new java.util.Date(cursor.getLong(offset + 3)));
        entity.setExerciseId(cursor.getLong(offset + 4));
        entity.setWorkoutSessionId(cursor.getLong(offset + 5));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(ExerciseSet entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(ExerciseSet entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "exercises" to-many relationship of Exercise. */
    public List<ExerciseSet> _queryExercise_Exercises(long exerciseId) {
        synchronized (this) {
            if (exercise_ExercisesQuery == null) {
                QueryBuilder<ExerciseSet> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.ExerciseId.eq(null));
                exercise_ExercisesQuery = queryBuilder.build();
            }
        }
        Query<ExerciseSet> query = exercise_ExercisesQuery.forCurrentThread();
        query.setParameter(0, exerciseId);
        return query.list();
    }

    /** Internal query to resolve the "exerciseSets" to-many relationship of WorkoutSession. */
    public List<ExerciseSet> _queryWorkoutSession_ExerciseSets(long workoutSessionId) {
        synchronized (this) {
            if (workoutSession_ExerciseSetsQuery == null) {
                QueryBuilder<ExerciseSet> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.WorkoutSessionId.eq(null));
                workoutSession_ExerciseSetsQuery = queryBuilder.build();
            }
        }
        Query<ExerciseSet> query = workoutSession_ExerciseSetsQuery.forCurrentThread();
        query.setParameter(0, workoutSessionId);
        return query.list();
    }

    private String selectDeep;

    protected String getSelectDeep() {
        if (selectDeep == null) {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getExerciseDao().getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T1", daoSession.getWorkoutSessionDao().getAllColumns());
            builder.append(" FROM EXERCISE_SET T");
            builder.append(" LEFT JOIN EXERCISE T0 ON T.'EXERCISE_ID'=T0.'_id'");
            builder.append(" LEFT JOIN WORKOUT_SESSION T1 ON T.'WORKOUT_SESSION_ID'=T1.'_id'");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }
    
    protected ExerciseSet loadCurrentDeep(Cursor cursor, boolean lock) {
        ExerciseSet entity = loadCurrent(cursor, 0, lock);
        int offset = getAllColumns().length;

        Exercise exercise = loadCurrentOther(daoSession.getExerciseDao(), cursor, offset);
         if(exercise != null) {
            entity.setExercise(exercise);
        }
        offset += daoSession.getExerciseDao().getAllColumns().length;

        WorkoutSession workoutSession = loadCurrentOther(daoSession.getWorkoutSessionDao(), cursor, offset);
         if(workoutSession != null) {
            entity.setWorkoutSession(workoutSession);
        }

        return entity;    
    }

    public ExerciseSet loadDeep(Long key) {
        assertSinglePk();
        if (key == null) {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();
        
        String[] keyArray = new String[] { key.toString() };
        Cursor cursor = db.rawQuery(sql, keyArray);
        
        try {
            boolean available = cursor.moveToFirst();
            if (!available) {
                return null;
            } else if (!cursor.isLast()) {
                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
            }
            return loadCurrentDeep(cursor, true);
        } finally {
            cursor.close();
        }
    }
    
    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
    public List<ExerciseSet> loadAllDeepFromCursor(Cursor cursor) {
        int count = cursor.getCount();
        List<ExerciseSet> list = new ArrayList<ExerciseSet>(count);
        
        if (cursor.moveToFirst()) {
            if (identityScope != null) {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try {
                do {
                    list.add(loadCurrentDeep(cursor, false));
                } while (cursor.moveToNext());
            } finally {
                if (identityScope != null) {
                    identityScope.unlock();
                }
            }
        }
        return list;
    }
    
    protected List<ExerciseSet> loadDeepAllAndCloseCursor(Cursor cursor) {
        try {
            return loadAllDeepFromCursor(cursor);
        } finally {
            cursor.close();
        }
    }
    

    /** A raw-style query where you can pass any WHERE clause and arguments. */
    public List<ExerciseSet> queryDeep(String where, String... selectionArg) {
        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
        return loadDeepAllAndCloseCursor(cursor);
    }
 
}
